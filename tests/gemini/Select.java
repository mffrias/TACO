package gemini;
//Prompt:  Generate a JML specification and a code implementation for the method public  long select that takes in two
// integers, n and r, and a boolean flag. If flag is true, the method computes the combination of n and r; otherwise,
// it computes the permutation of n and r.
public class Select {

    /*@
     @requires n >= 0 && r >= 0 && r <= n;
     @ensures (flag ==> \result == (long)(\product int i; 0 <= i && i < r; (n-i)) / (long)(\product int i; 1 <= i && i <= r; i));
     @ensures (!flag ==> \result == (long)(\product int i; 0 <= i && i < r; (n-i)));
     @signals (IllegalArgumentException) n < 0 || r < 0 || r > n;
     @*/
    public long select(int n, int r, boolean flag) {

        if (n < 0 || r < 0 || r > n) {
            throw new IllegalArgumentException();
        }

        if (r == 0) {
            return 1L;
        }

        // This loop calculates the permutation P(n, r) = n! / (n-r)!
        long result = 1L;
        for (int i = 0; i < r; i++) {
            result *= (n - i);
        }

        // If flag is true, divide by r! to get the combination C(n, r)
        if (flag) {
            for (int i = 1; i <= r; i++) {
                result /= i;
            }
        }

        return result;
    }
}

/*store here your opinion about the quality of the generated spec
The JML specifications generated by gemini hava not compiled because the "quantified operator" is not supported yet by the parser.
This was triggered by the \product operator, which in later prompts can be specified to avoid.
 */

    /*store here your opinion about the quality of the generated code
The code generated follows a straight-forward logic.
/*store here the result of the analysis with TACO

ar.edu.taco.TacoNotImplementedYetException: Quantified operator not supported yet
 */

    /*if TACO's outcome was "SAT: A failure has been detected", store here
    the source code of the method in folder "generated" that describes the
    counterexample. Otherwise report "UNSAT".

     */


