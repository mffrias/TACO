package genai.chatGPT;
//Prompt:  Generate a JML specification and a code implementation for the method public static long permutation that takes in two integers, n and r,
// in order to compute the number of ways to arrange r elements from a set of n elements where order matters.
public class Permutation {

    //JML specification generated:
    /*@
      @ requires n >= 0 && r >= 0 && r <= n;
      @ ensures (r == 0) ==> (\result == 1);
      @ ensures (r == 1) ==> (\result == n);
      @ ensures \result >= 1;
      @ signals (IllegalArgumentException e) (n < 0 || r < 0 || r > n);
      @*/
    //Code generated:
    public static long permutation(int n, int r) {
        if (n < 0 || r < 0 || r > n) {
            throw new IllegalArgumentException();
        }

        long result = 1;
        int i = 0;
        while (i < r) {
            result *= (n - i);
            i++;
        }
        return result;
    }
}
/*store here your opinion about the quality of the generated spec
The specification generated by chatGPT was functional and concise, parsed correctly by the program and brief.
 */

    /*store here your opinion about the quality of the generated code
The code generated ran into an issue, in line 17, where the exception message thrown was interpreted as a block to cast an alloy expression
/*store here the result of the analysis with TACO
     */

//    * Outcome                 : UNSAT: No failures were detected within the given scopes.
//    * Solving time            : 32726
// */

    /*if TACO's outcome was "SAT: A failure has been detected", store here
    the source code of the method in folder "generated" that describes the
    counterexample. Otherwise report "UNSAT".
UNSAT
     */